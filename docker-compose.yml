version: '3.8'

services:
  # Backend API Service
  backend-api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=sqlite:./freight_flow.sqlite
      - JWT_SECRET=your-jwt-secret-key
      - WEBSOCKET_URL=ws://websocket-server:3001
      - ML_SERVICE_URL=http://ml-service:8000
    volumes:
      - ./backend/api:/app
      - /app/node_modules
    depends_on:
      - websocket-server
      - ml-service
    networks:
      - freight-network
    command: npm run start:dev

  # WebSocket Server
  websocket-server:
    build:
      context: ./websocket-server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - BACKEND_API_URL=http://backend-api:3000
    volumes:
      - ./websocket-server:/app
      - /app/node_modules
    networks:
      - freight-network
    command: npm run dev

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - BACKEND_API_URL=http://backend-api:3000
    volumes:
      - ./ml-service:/app
    networks:
      - freight-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Database (PostgreSQL for production)
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=freight_flow
      - POSTGRES_USER=freight_user
      - POSTGRES_PASSWORD=freight_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/api/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - freight-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - freight-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend-api
      - websocket-server
    networks:
      - freight-network

volumes:
  postgres_data:
  redis_data:

networks:
  freight-network:
    driver: bridge 